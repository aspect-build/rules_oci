load("@aspect_bazel_lib//lib:diff_test.bzl", "diff_test")
load("@aspect_bazel_lib//lib:transitions.bzl", "platform_transition_filegroup")
load("@bazel_skylib//rules:build_test.bzl", "build_test")
load(":pull_tests.bzl", "parse_image_test")

_PLATFORM = "linux/amd64"

platform(
    name = _PLATFORM,
    constraint_values = [
        "@platforms//os:linux",
        "@platforms//cpu:x86_64",
    ],
)

# Use crane to pull images as a comparison for our oci_pull repository rule
[
    genrule(
        name = "pull_{image}".format(image = image),
        outs = [image],
        cmd = "$(CRANE_BIN) pull gcr.io/distroless/{image}@{digest} $@ --format=oci --platform={platform}".format(
            digest = digest,
            image = image,
            platform = _PLATFORM,
        ),
        local = True,  # needs to run locally to able to use credential helpers
        message = "Pulling gcr.io/distroless/{image} for {platform}".format(
            image = image,
            platform = _PLATFORM,
        ),
        output_to_bindir = True,
        tags = ["requires-network"],
        toolchains = [
            "@oci_crane_toolchains//:current_toolchain",
        ],
        visibility = ["//visibility:public"],
    )
    for image, digest in {
        "java17": "sha256:161a1d97d592b3f1919801578c3a47c8e932071168a96267698f4b669c24c76d",
        "static": "sha256:c3c3d0230d487c0ad3a0d87ad03ee02ea2ff0b3dcce91ca06a1019e07de05f12",
    }.items()
]

platform_transition_filegroup(
    name = "distroless_java_amd64",
    # This one is declared with an oci_pull rule in /WORKSPACE
    srcs = ["@distroless_java"],
    target_platform = _PLATFORM,
)

diff_test(
    name = "test_java17",
    file1 = "java17",
    file2 = "distroless_java_amd64",
)

platform_transition_filegroup(
    name = "distroless_static_amd64",
    srcs = ["@distroless_static"],
    target_platform = _PLATFORM,
)

diff_test(
    name = "test_static",
    file1 = "static",
    file2 = "distroless_static_amd64",
)

# assert than we don't break fetching these
build_test(
    name = "pull_test",
    targets = [
        "@aws_lambda_python",
        "@debian",
        "@debian_latest",
        "@debian_stable",
        "@apollo_router",
        "@from_rules_docker",
        "@ubuntu",
    ],
)

parse_image_test(name = "parse_image_test")
