"""A repository rule (used in WORKSPACE) to pull image layers using Bazel's downloader"""

load("@aspect_bazel_lib//lib:paths.bzl", "BASH_RLOCATION_FUNCTION")

_MANIFEST_TYPE = "application/vnd.docker.distribution.manifest.v2+json"
_MANIFEST_LIST_TYPE = "application/vnd.docker.distribution.manifest.list.v2+json"

# Note: this isn't an exhaustive list, should find the docker spec to know all legal values.
# This is only used for the oci_alias rule that makes a select() - if a mapping is missing,
# users can just write their own select() for it.
_DOCKER_ARCH_TO_BAZEL_CPU = {
    "amd64": "@platforms//cpu:x86_64",
    "arm": "@platforms//cpu:arm",
    "arm64": "@platforms//cpu:arm64",
    "ppc64le": "@platforms//cpu:ppc",
    "s390x": "@platforms//cpu:s390x",
}

def _download(rctx, identifier, output, resource = "blobs"):
    "Use the Bazel Downloader to fetch from the remote registry"

    if resource != "blobs" and resource != "manifests":
        fail("resource must be blobs or manifests")

    # Construct the URL to fetch from remote, see
    # https://github.com/google/go-containerregistry/blob/62f183e54939eabb8e80ad3dbc787d7e68e68a43/pkg/v1/remote/descriptor.go#L234
    firstslash = rctx.attr.image.find("/")
    registry_url = "https://{registry}/v2/{repository}/{resource}/{identifier}".format(
        registry = rctx.attr.image[:firstslash],
        repository = rctx.attr.image[firstslash + 1:],
        resource = resource,
        identifier = identifier,
    )

    # TODO(https://github.com/bazel-contrib/rules_oci/issues/73): other hash algorithms
    if identifier.startswith("sha256:"):
        rctx.download(
            output = output,
            sha256 = identifier[len("sha256:"):],
            url = registry_url,
        )
    else:
        # buildifier: disable=print
        print("""
WARNING: fetching from %s without an integrity hash. The result will not be cached.""" % registry_url)
        rctx.download(
            output = output,
            url = registry_url,
        )

    if resource == "manifests":
        bytes = rctx.read(output)
        return json.decode(bytes), len(bytes)
    return None

_build_file = """\
"Generated by oci_pull"

load("@aspect_bazel_lib//lib:copy_to_directory.bzl", "copy_to_directory")
load("@aspect_bazel_lib//lib:jq.bzl", "jq")
load("@bazel_skylib//rules:write_file.bzl", "write_file")

package(default_visibility = ["//visibility:public"])

# Mimic the output of crane pull [image] layout --format=oci
write_file(
    name = "write_layout",
    out = "oci-layout",
    content = [
        "{{",
        "    \\"imageLayoutVersion\\": \\"1.0.0\\"",
        "}}",
    ],
)

write_file(
    name = "write_index",
    out = "index.json",
    content = [\"\"\"{index_content}\"\"\"],
)

copy_to_directory(
    name = "blobs",
    # TODO(https://github.com/bazel-contrib/rules_oci/issues/73): other hash algorithms
    out = "blobs/sha256",
    include_external_repositories = ["*"],
    srcs = {tars} + [
        ":{manifest_file}",
        ":{config_file}",
    ],
)

copy_to_directory(
    name = "{name}",
    out = "layout",
    include_external_repositories = ["*"],
    srcs = [
        "blobs",
        "oci-layout",
        "index.json",
    ],
)
"""

def _trim_hash_algorithm(digest):
    parts = digest.split(":", 1)
    if len(parts) != 2:
        fail("digest {} doesn't contain a colon".format(digest))
    return parts[1]

def _find_platform_manifest(rctx, image_mf):
    for mf in image_mf["manifests"]:
        plat = "{}/{}".format(mf["platform"]["os"], mf["platform"]["architecture"])
        if plat == rctx.attr.platform:
            return mf
    fail("No matching manifest found in image {} for platform {}".format(rctx.attr.image, rctx.attr.platform))

def _pull_impl(rctx):
    mf_file = _trim_hash_algorithm(rctx.attr.digest)
    mf, mf_len = _download(rctx, rctx.attr.digest, mf_file, resource = "manifests")
    if mf["mediaType"] == _MANIFEST_TYPE:
        if rctx.attr.platform:
            fail("{} is a single-architecture image, so attribute 'platform' should not be set.")
        image_mf_file = mf_file
        image_mf = mf
        image_mf_len = mf_len
    elif mf["mediaType"] == _MANIFEST_LIST_TYPE:
        # extra download to get the manifest for the selected arch
        if not rctx.attr.platform:
            fail("{} is a multi-architecture image, so attribute 'platform' is required.")
        matching_mf = _find_platform_manifest(rctx, mf)
        image_mf_file = _trim_hash_algorithm(matching_mf["digest"])
        image_mf, image_mf_len = _download(rctx, matching_mf["digest"], image_mf_file, resource = "manifests")
    else:
        fail("Unrecognized mediaType {} in manifest file".format(image_mf["mediaType"]))

    image_config_file = _trim_hash_algorithm(image_mf["config"]["digest"])
    image_config = _download(rctx, image_mf["config"]["digest"], image_config_file)
    tars = []
    for layer in image_mf["layers"]:
        hash = _trim_hash_algorithm(layer["digest"])
        _download(rctx, layer["digest"], hash)
        tars.append(hash)

    # To make testing against `crane pull` simple, we take care to produce a byte-for-byte-identical
    # index.json file, which means we can't use jq (it produces a trailing newline) or starlark
    # json.encode_indent (it re-orders keys in the dictionary).
    index_mf = "\n".join([
        "{",
        "   \"schemaVersion\": 2,",
        "   \"manifests\": [",
        "      {",
        "         \"mediaType\": \"application/vnd.docker.distribution.manifest.v2+json\",",
        "         \"size\": {},".format(image_mf_len),
        # TODO(https://github.com/bazel-contrib/rules_oci/issues/73): other hash algorithms
        "         \"digest\": \"sha256:{}\"".format(image_mf_file),
        "      }",
        "   ]",
        "}",
    ])
    if rctx.attr.platform:
        os, arch = rctx.attr.platform.split("/", 1)
        index_mf = "\n".join([
            "{",
            "   \"schemaVersion\": 2,",
            "   \"manifests\": [",
            "      {",
            "         \"mediaType\": \"application/vnd.docker.distribution.manifest.v2+json\",",
            "         \"size\": {},".format(image_mf_len),
            # TODO(https://github.com/bazel-contrib/rules_oci/issues/73): other hash algorithms
            "         \"digest\": \"sha256:{}\",".format(image_mf_file),
            "         \"platform\": {",
            "            \"architecture\": \"{}\",".format(arch),
            "            \"os\": \"{}\"".format(os),
            "         }",
            "      }",
            "   ]",
            "}",
        ])
    rctx.file("BUILD.bazel", content = _build_file.format(
        name = rctx.attr.name,
        tars = tars,
        index_content = index_mf,
        manifest_file = image_mf_file,
        config_file = image_config_file,
    ))

oci_pull_rule = repository_rule(
    implementation = _pull_impl,
    attrs = {
        "image": attr.string(doc = "The name of the image we are fetching, e.g. gcr.io/distroless/static", mandatory = True),
        "digest": attr.string(doc = "The digest of the manifest file", mandatory = True),
        "platform": attr.string(doc = "platform in `os/arch` format, for multi-arch images"),
    },
)

_alias_target = """\
alias(
    name = "{name}",
    actual = select(
        {platform_map}
    ),
    visibility = ["//visibility:public"],
)
"""

def _alias_impl(rctx):
    rctx.file("BUILD.bazel", content = _alias_target.format(
        name = rctx.attr.name,
        platform_map = {str(k): v for k, v in rctx.attr.platforms.items()},
    ))

oci_alias_rule = repository_rule(
    implementation = _alias_impl,
    attrs = {"platforms": attr.label_keyed_string_dict()},
)

_latest_build = """\
load("@aspect_bazel_lib//lib:jq.bzl", "jq")
load("@bazel_skylib//rules:write_file.bzl", "write_file")

jq(
    name = "platforms",
    srcs = ["manifest_list.json"],
    filter = "[(.manifests // [])[] | .platform | .os + \\"/\\" + .architecture]",
    # Print without newlines because it's too hard to indent that to fit under the generated
    # starlark code below.
    args = ["--compact-output"],
)

jq(
    name = "mediaType",
    srcs = ["manifest_list.json"],
    filter = ".mediaType",
    args = ["--raw-output"],
)

sh_binary(
    name = "pin",
    srcs = ["pin.sh"],
    data = [
        ":mediaType",
        ":platforms",
        "@bazel_tools//tools/bash/runfiles",
    ],
)
"""

_pin_sh = """\
#!/usr/bin/env bash
{rlocation}

mediaType="$(cat $(rlocation {name}/mediaType.json))"
echo -e "Replace your '{name}' declaration with the following:\n"

cat <<EOF
oci_pull(
    name = "{name}",
    digest = "sha256:{digest}",
    image = "{image}",
EOF

[[ $mediaType == "{manifestListType}" ]] && cat <<EOF
    # Listing of all platforms that were found in the image manifest.
    # You may remove any that you don't use.
    platforms = $(cat $(rlocation {name}/platforms.json)),
EOF

echo ")"
"""

def _pull_latest_impl(rctx):
    """Download the 'latest' tag and create a repository that can produce pinning instructions"""
    _download(rctx, "latest", "manifest_list.json", "manifests")
    result = rctx.execute(["shasum", "-a", "256", "manifest_list.json"])
    if result.return_code:
        msg = "shasum failed: \nSTDOUT:\n%s\nSTDERR:\n%s" % (result.stdout, result.stderr)
        fail(msg)
    rctx.file("pin.sh", _pin_sh.format(
        name = rctx.attr.name,
        digest = result.stdout.split(" ", 1)[0],
        image = rctx.attr.image,
        rlocation = BASH_RLOCATION_FUNCTION,
        manifestListType = _MANIFEST_LIST_TYPE,
    ), executable = True)
    rctx.file("BUILD.bazel", _latest_build)

pull_latest = repository_rule(_pull_latest_impl, attrs = {"image": attr.string()})

def oci_pull(name, image, platforms = None, digest = None):
    """Repository rule to fetch image manifest data from a remote docker registry.

    Args:
        name: repository with this name is created
        image: the remote image without a tag, such as gcr.io/bazel-public/bazel
        platforms: for multi-architecture images, a dictionary of the platforms it supports
            This creates a separate external repository for each platform, avoiding fetching layers.
        digest: the digest string, starting with "sha256:", "sha512:", etc.
            If omitted, instructions for pinning are provided.
    """

    if digest == None:
        pull_latest(name = name, image = image)

        # Print a command - in the future we should print a buildozer command or
        # buildifier: disable=print
        print("""
WARNING: for reproducible builds, a digest is recommended.
Run the following command to fix this:

bazel run @{}//:pin
""".format(name))
        return

    if platforms:
        select_map = {}
        for plat in platforms:
            plat_name = "_".join([name] + plat.split("/"))
            os, arch = plat.split("/", 1)
            oci_pull_rule(
                name = plat_name,
                image = image,
                digest = digest,
                platform = plat,
            )
            select_map[_DOCKER_ARCH_TO_BAZEL_CPU[arch]] = "@" + plat_name
        oci_alias_rule(
            name = name,
            platforms = select_map,
        )
    else:
        oci_pull_rule(
            name = name,
            image = image,
            digest = digest,
        )
