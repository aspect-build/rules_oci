"""A repository rule (used in WORKSPACE) to pull image layers using Bazel's downloader"""

load("@aspect_bazel_lib//lib:paths.bzl", "BASH_RLOCATION_FUNCTION")

_MANIFEST_TYPE = "application/vnd.docker.distribution.manifest.v2+json"
_MANIFEST_LIST_TYPE = "application/vnd.docker.distribution.manifest.list.v2+json"

# Note: this isn't an exhaustive list, should find the docker spec to know all legal values.
_DOCKER_ARCH_TO_BAZEL_CPU = {
    "amd64": "@platforms//cpu:x86_64",
    "arm": "@platforms//cpu:arm",
    "arm64": "@platforms//cpu:arm64",
    "ppc64le": "@platforms//cpu:ppc",
    "s390x": "@platforms//cpu:s390x",
}

def _download(rctx, identifier, output, resource = "blobs"):
    "Use the Bazel Downloader to fetch from the remote registry"

    if resource != "blobs" and resource != "manifests":
        fail("resource must be blobs or manifests")

    # Construct the URL to fetch from remote, see
    # https://github.com/google/go-containerregistry/blob/62f183e54939eabb8e80ad3dbc787d7e68e68a43/pkg/v1/remote/descriptor.go#L234
    firstslash = rctx.attr.image.find("/")
    registry_url = "https://{registry}/v2/{repository}/{resource}/{identifier}".format(
        registry = rctx.attr.image[:firstslash],
        repository = rctx.attr.image[firstslash + 1:],
        resource = resource,
        identifier = identifier,
    )

    if identifier.startswith("sha256:"):
        rctx.download(
            output = output,
            sha256 = identifier[len("sha256:"):],
            url = registry_url,
        )
    else:
        # buildifier: disable=print
        print("""
WARNING: fetching from %s without a sha256 integrity hash. The result will not be cached.""" % registry_url)
        rctx.download(
            output = output,
            url = registry_url,
        )

    if resource == "manifests":
        return json.decode(rctx.read(output))
    return None

_build_file = """\
"Generated by oci_pull"

load("@aspect_bazel_lib//lib:copy_to_directory.bzl", "copy_to_directory")
load("@aspect_bazel_lib//lib:jq.bzl", "jq")
load("@bazel_skylib//rules:write_file.bzl", "write_file")

package(default_visibility = ["//visibility:public"])

# Mimic the output of crane pull [image] layout --format=oci
write_file(
    name = "write_layout",
    out = "oci-layout",
    content = [
        "{{",
        "    \\"imageLayoutVersion\\": \\"1.0.0\\"",
        "}}",
    ],
)

write_file(
    name = "raw_index",
    out = "raw.json",
    content = [\"\"\"{index_content}\"\"\"],
)

jq(
    name = "index",
    srcs = ["raw.json"],
    filter = "del(.layers)",
    args = ["--indent", "4"],
)

copy_to_directory(
    name = "blobs",
    out = "blobs/sha256",
    include_external_repositories = ["*"],
    srcs = {tars} + [
        ":{manifest_file}",
        ":{config_file}",
    ],
)

copy_to_directory(
    name = "{name}",
    out = "layout",
    include_external_repositories = ["*"],
    srcs = [
        "blobs",
        "oci-layout",
        "index.json",
    ],
)
"""

def _find_platform_manifest(rctx, image_mf):
    for mf in image_mf["manifests"]:
        if mf["platform"]["os"] == rctx.attr.os and mf["platform"]["architecture"] == rctx.attr.architecture:
            return mf
    fail("No matching manifest found in image {} for os {} and architecture {}".format(rctx.attr.image, rctx.attr.os, rctx.attr.architecture))

def _pull_impl(rctx):
    image_mf_file = rctx.attr.digest.replace("sha256:", "")
    image_mf = _download(rctx, rctx.attr.digest, image_mf_file, resource = "manifests")
    if image_mf["mediaType"] == _MANIFEST_TYPE:
        if rctx.attr.os:
            fail("{} is a single-architecture image, so attribute 'os' should not be set.")
        if rctx.attr.architecture:
            fail("{} is a single-architecture image, so attribute 'architecture' should not be set.")
    elif image_mf["mediaType"] == _MANIFEST_LIST_TYPE:
        # extra download to get the manifest for the selected arch
        if not rctx.attr.os:
            fail("{} is a multi-architecture image, so attribute 'os' is required.")
        if not rctx.attr.architecture:
            fail("{} is a multi-architecture image, so attribute 'architecture' is required.")
        mf = _find_platform_manifest(rctx, image_mf)
        image_mf_file = mf["digest"].replace("sha256:", "")
        image_mf = _download(rctx, mf["digest"], image_mf_file, resource = "manifests")
    else:
        fail("Unrecognized mediaType {} in manifest file".format(image_mf["mediaType"]))

    image_config_file = image_mf["config"]["digest"].replace("sha256:", "")
    image_config = _download(rctx, image_mf["config"]["digest"], image_config_file)
    tars = []
    for layer in image_mf["layers"]:
        sha256 = layer["digest"].replace("sha256:", "")
        _download(rctx, layer["digest"], sha256)
        tars.append(sha256)

    rctx.file("BUILD.bazel", content = _build_file.format(
        name = rctx.attr.name,
        tars = tars,
        index_content = image_mf,
        manifest_file = image_mf_file,
        config_file = image_config_file,
    ))

oci_pull_rule = repository_rule(
    implementation = _pull_impl,
    attrs = {
        "image": attr.string(doc = "The name of the image we are fetching, e.g. gcr.io/distroless/static", mandatory = True),
        "digest": attr.string(doc = "The digest of the manifest file", mandatory = True),
        "os": attr.string(doc = "platform os, for multi-arch images"),
        "architecture": attr.string(doc = "platform architecture, for multi-arch images"),
    },
)

_alias_target = """\
alias(
    name = "{name}",
    actual = select(
        {platform_map}
    ),
    visibility = ["//visibility:public"],
)
"""

def _alias_impl(rctx):
    rctx.file("BUILD.bazel", content = _alias_target.format(
        name = rctx.attr.name,
        platform_map = {str(k): v for k, v in rctx.attr.platforms.items()},
    ))

oci_alias_rule = repository_rule(
    implementation = _alias_impl,
    attrs = {"platforms": attr.label_keyed_string_dict()},
)

_latest_build = """\
load("@aspect_bazel_lib//lib:jq.bzl", "jq")
load("@bazel_skylib//rules:write_file.bzl", "write_file")

jq(
    name = "platforms",
    srcs = ["manifest_list.json"],
    filter = "[(.manifests // [])[] | .platform]",
    # Print without newlines because it's too hard to indent that to fit under the generated
    # starlark code below.
    args = ["--compact-output"],
)

jq(
    name = "mediaType",
    srcs = ["manifest_list.json"],
    filter = ".mediaType",
    args = ["--raw-output"],
)

sh_binary(
    name = "pin",
    srcs = ["pin.sh"],
    data = [
        ":mediaType",
        ":platforms",
        "@bazel_tools//tools/bash/runfiles",
    ],
)
"""

_pin_sh = """\
#!/usr/bin/env bash
{rlocation}

mediaType="$(cat $(rlocation {name}/mediaType.json))"
echo -e "Replace your '{name}' declaration with the following:\n"

cat <<EOF
oci_pull(
    name = "{name}",
    digest = "sha256:{digest}",
    image = "{image}",
EOF

[[ $mediaType == "{manifestListType}" ]] && cat <<EOF
    # Listing of all platforms that were found in the image manifest.
    # You may remove any that you don't use.
    platforms = $(cat $(rlocation {name}/platforms.json)),
EOF

echo ")"
"""

def _pull_latest_impl(rctx):
    """Download the 'latest' tag and create a repository that can produce pinning instructions"""
    _download(rctx, "latest", "manifest_list.json", "manifests")
    result = rctx.execute(["shasum", "-a", "256", "manifest_list.json"])
    if result.return_code:
        msg = "shasum failed: \nSTDOUT:\n%s\nSTDERR:\n%s" % (result.stdout, result.stderr)
        fail(msg)
    rctx.file("pin.sh", _pin_sh.format(
        name = rctx.attr.name,
        digest = result.stdout.split(" ", 1)[0],
        image = rctx.attr.image,
        rlocation = BASH_RLOCATION_FUNCTION,
        manifestListType = _MANIFEST_LIST_TYPE,
    ), executable = True)
    rctx.file("BUILD.bazel", _latest_build)

pull_latest = repository_rule(_pull_latest_impl, attrs = {"image": attr.string()})

def oci_pull(name, image, platforms = None, digest = None):
    """Repository rule to fetch image manifest data from a remote docker registry.

    Args:
        name: repository with this name is created
        image: the remote image without a tag, such as gcr.io/bazel-public/bazel
        platforms: for multi-architecture images, a dictionary of the platforms it supports
            This creates a separate external repository for each platform, avoiding fetching layers.
        digest: the sha256 digest string, starting with "sha256:". If omitted, instructions for pinning are provided.
    """

    if digest == None:
        pull_latest(name = name, image = image)

        # buildifier: disable=print
        print("""
WARNING: for reproducible builds, a digest is recommended.
Run the following command to fix this:

bazel run @{}//:pin
""".format(name))
        return

    if platforms:
        for plat in platforms:
            oci_pull_rule(
                name = "_".join([name, plat["os"], plat["architecture"]]),
                image = image,
                digest = digest,
                os = plat["os"],
                architecture = plat["architecture"],
            )
        oci_alias_rule(
            name = name,
            platforms = {
                _DOCKER_ARCH_TO_BAZEL_CPU[plat["architecture"]]: "@{}_linux_{}".format(name, plat["architecture"])
                for plat in platforms
            },
        )
    else:
        oci_pull_rule(
            name = name,
            image = image,
            digest = digest,
        )
