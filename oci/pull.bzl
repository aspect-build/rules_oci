"Pull image layers using Bazel downloader"

_attrs = {
    "image": attr.string(),
    "tag": attr.string(),
}

def _download(rctx, tag, output, type = "manifests"):
    if type != "blobs" and type != "manifests":
        fail("type must be blobs or manifests")
    if rctx.attr.image.startswith("gcr.io/"):
        registry_url = "https://gcr.io/v2/{image}/{type}/{tag}".format(
            image = rctx.attr.image[len("gcr.io/"):],
            type = type,
            tag = tag,
        )
    else:
        fail("Unrecognized registry. We only understand gcr.io currently. File an issue on rules_oci.")

    sha256 = None
    if tag.startswith("sha256:"):
        sha256 = tag[len("sha256:"):]
    rctx.download(
        url = registry_url,
        sha256 = sha256,
        output = output,
    )
    if type == "manifests":
        return json.decode(rctx.read(output))
    return None

def _download_blobs(rctx, tag, output):
    _download(rctx, tag, output, "blobs")

_build_file_header = """\
# Generated by oci_pull

load("@contrib_rules_oci//oci:defs.bzl", "oci_image")

package(default_visibility = ["//visibility:public"])
"""

_oci_image_target = """\
oci_image(
    name = "{name}_{os}_{arch}",
    tars = {tars},
    os = "{os}",
    architecture = "{arch}",
)
"""

_alias_target = """\
alias(
    name = "{name}",
    actual = select({{
        "@platforms//cpu:arm64": "{name}_linux_arm64",
        "@platforms//cpu:x86_64": "{name}_linux_amd64",
    }}),
)
"""

def _pull_impl(rctx):
    if not rctx.attr.tag.startswith("sha256:"):
        # buildifier: disable=print
        print("""\
WARNING: unpinned tag {} may change in future installs.
To get the digest, you can run
$ bazel run @oci_crane_darwin_arm64//:crane digest gcr.io/distroless/static:latest
Then replace the tag with the sha256:... value it prints.
""".format(rctx.attr.tag))

    build_content = [_build_file_header]

    mf = _download(rctx, rctx.attr.tag, rctx.attr.image + ".json")

    for m in mf["manifests"]:
        image_mf_file = "{}_{}.json".format(m["platform"]["os"], m["platform"]["architecture"])
        image_mf = _download(rctx, m["digest"], image_mf_file)

        tars = []
        for layer in image_mf["layers"]:
            sha256 = layer["digest"].replace("sha256:", "")
            _download_blobs(rctx, layer["digest"], sha256 + ".tar")
            tars.append(sha256 + ".tar")

        build_content.append(_oci_image_target.format(
            name = rctx.attr.name,
            os = m["platform"]["os"],
            arch = m["platform"]["architecture"],
            tars = tars,
        ))

    build_content.append(_alias_target.format(name = rctx.attr.name))
    rctx.file("BUILD.bazel", content = "\n".join(build_content))

oci_pull = repository_rule(
    implementation = _pull_impl,
    attrs = _attrs,
)
