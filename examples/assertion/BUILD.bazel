load("@aspect_bazel_lib//lib:tar.bzl", "tar")
load("@aspect_bazel_lib//lib:transitions.bzl", "platform_transition_filegroup")
load("@bazel_skylib//rules:build_test.bzl", "build_test")
load("//oci:defs.bzl", "oci_image", "oci_tarball")
load(":assert.bzl", "assert_oci_config")

# Case 1: image name containing a capital case.
oci_image(
    name = "imagE",
    architecture = "amd64",
    cmd = ["noop"],
    os = "linux",
)

# Case 2: existing layer added again.
tar(
    name = "empty_tar",
    srcs = [],
)

oci_image(
    name = "same_tar_multiple_times",
    architecture = "amd64",
    cmd = ["noop"],
    os = "linux",
    tars = [
        ":empty_tar",
    ],
)

oci_image(
    name = "case2",
    base = ":same_tar_multiple_times",
    tars = [
        ":empty_tar",
    ],
)

# Case 3: Adding an identical tar from another directory multiple times
oci_image(
    name = "case3",
    architecture = "arm64",
    os = "linux",
    tars = [
        # layer_0 and layer_1 is identical
        "//examples/just_tar:layer_0",
        "//examples/just_tar:layer_1",
    ],
)

# Case 4: Transition an oci_image and feed to oci_tarball
oci_image(
    name = "case4",
    architecture = "arm64",
    os = "linux",
)

platform_transition_filegroup(
    name = "case4_transition",
    srcs = [":case4"],
    target_platform = "//examples:linux_arm64",
)

oci_tarball(
    name = "case4_tarball",
    image = ":case4_transition",
    repo_tags = ["case4:example"],
)

filegroup(
    name = "case4_tarball_tar",
    srcs = [":case4_tarball"],
    output_group = "tarball",
)

# Case 5: An oci_image directly fed into oci_tarball
oci_image(
    name = "case5",
    architecture = "arm64",
    os = "linux",
)

oci_tarball(
    name = "case5_tarball",
    image = ":case5",
    repo_tags = ["case5:example"],
)

filegroup(
    name = "case5_tarball_tar",
    srcs = [":case5_tarball"],
    output_group = "tarball",
)

# Case 6: test all cases that might break
oci_image(
    name = "case6",
    architecture = "arm64",
    env = {
        "TEST": "VALUE=",
        "TEST2": "=VALUE=",
        "TEST3": "=VALUE",
        "TEST4": "=V=VALUE",
        # an env that includes previously set $TEST env with a leading `=`
        "LEAD_WITH_REF": "=$TEST",
        "JUST_EQUALS": "======$$$$",
        "1": "VAL",
        # referencing non-existent env vars is just empty string.
        "REFS": "$1:${1}:${NONEXISTENT}",
    },
    os = "linux",
)

assert_oci_config(
    name = "test_case6",
    env_eq = {
        "TEST": "VALUE=",
        "TEST2": "=VALUE=",
        "TEST3": "=VALUE",
        "TEST4": "=V=VALUE",
        "LEAD_WITH_REF": "=VALUE=",
        "JUST_EQUALS": "======$$$$",
        "1": "VAL",
        "REFS": "VAL:VAL:",
    },
    image = ":case6",
)

# build them as test.
build_test(
    name = "test",
    targets = [
        ":imagE",
        ":case2",
        ":case3",
        ":case4_tarball_tar",
        ":case5_tarball_tar",
    ],
)
