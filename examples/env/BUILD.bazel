load("//oci:defs.bzl", "oci_image")
load("@aspect_bazel_lib//lib:jq.bzl", "jq")
load("@rules_pkg//:pkg.bzl", "pkg_tar")
load("@container_structure_test//:defs.bzl", "container_structure_test")

pkg_tar(
    name = "app",
    srcs = ["test.bash"],
)

# We don't actually work with JSON, but the jq rule happens to be stamp-aware so we can (ab)use it
# to put (non-deterministic) version information in our labels/annotations.
# You'd typically use that only when building release artifacts, not for testing, as it causes
# action cache misses.
jq(
    name = "env",
    srcs = [],
    out = "env.txt",
    args = ["--raw-output"],
    filter = """\
        # See docs for jq rule about stamping:
        # https://docs.aspect.build/rules/aspect_bazel_lib/docs/jq
        $ARGS.named.STAMP as $stamp |

        # Use the value of --embed_label under --stamp, otherwise use a deterministic constant
        # value to ensure cache hits for actions that depend on this.
        "BUILD_VERSION=" + ($stamp.BUILD_VERSION // "1.2.3")
    """,
)

oci_image(
    name = "image",
    base = "@ubuntu",
    cmd = ["test.sh"],
    env = ":env",
    tars = ["app.tar"],
)

container_structure_test(
    name = "test",
    configs = ["test.yaml"],
    image = ":image",
)
